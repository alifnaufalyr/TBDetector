# -*- coding: utf-8 -*-
"""Copy of tb_tensorflow_notebook_weighted tensorflow io 0.31.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13AIhctxJejdMJ8Q1GqZE82lWicziH7ng

# Tuberculosis Detection using TensorFlow
Google Colab-compatible version
"""

# Install library
# !pip install tensorflow pandas scikit-learn matplotlib

!pip install TensorFlow==2.15.0

!pip install tensorflowjs==4.17.0

!pip install tensorflow-decision-forests==1.8.1

import tensorflowjs as tfjs
tfjs.__version__

# Import dependencies
import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt

# Load dataset
# Upload the CSV file first in Colab

# Contoh: df = pd.read_csv('tuberculosis_labeled.csv')
df = pd.read_csv('tuberculosis_labeled.csv', sep=';')

# Preprocessing
df['Prediksi'] = df['Prediksi'].map({'Tidak': 0, 'Ya': 1})
X = df.drop(columns=['Prediksi']).astype('float32')
y = df['Prediksi']

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build TensorFlow model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(X.shape[1],)),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Cek distribusi label target
print("Distribusi Label:")
print(df['Prediksi'].value_counts())

# Hitung class weight untuk mengatasi data tidak seimbang
from sklearn.utils import class_weight

class_weights = class_weight.compute_class_weight(
    class_weight='balanced',
    classes=np.unique(y_train),
    y=y_train
)

class_weights = {0: class_weights[0], 1: class_weights[1]}
print("Class Weights:", class_weights)

# Train model
history = model.fit(X_train, y_train, epochs=20, validation_split=0.2, batch_size=16, class_weight=class_weights)

# Evaluate model
y_pred_prob = model.predict(X_test)
y_pred = (y_pred_prob > 0.5).astype('int32')

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Save model for TensorFlow.js
MODEL_DIR = './public/model'
# Create directory if it doesn't exist
!mkdir -p {MODEL_DIR}

# Save the model in TensorFlow.js format
tfjs.converters.save_keras_model(model, MODEL_DIR)

print(f"Model and feature info exported to {MODEL_DIR}")

# Save model
model.save("tuberculosis_model_tf.h5")

# Predict manually from a sample (adjust values accordingly)
# sample = np.array([[1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 120, 18.5]])  # Contoh 15 fitur
# Modifikasi sample untuk memiliki 16 fitur, sesuai dengan ekspektasi model.
# Anda perlu menyesuaikan nilai fitur ke-16 berdasarkan data Anda.
sample = np.array([[1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 120, 18.5, 0]]) # Contoh 16 fitur (menambahkan 0 sebagai fitur ke-16)
prediction = model.predict(sample)
print("Predicted result:", "TB Positif" if prediction[0][0] > 0.5 else "TB Negatif")

!pip freeze > requirements.txt